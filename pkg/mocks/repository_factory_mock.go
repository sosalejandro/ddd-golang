// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go
//
// Generated by this command:
//
//	mockgen -source=factory.go -destination=../../mocks/repository_factory_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	repository "github.com/sosalejandro/ddd-golang/pkg/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryFactory is a mock of RepositoryFactory interface.
type MockRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryFactoryMockRecorder
	isgomock struct{}
}

// MockRepositoryFactoryMockRecorder is the mock recorder for MockRepositoryFactory.
type MockRepositoryFactoryMockRecorder struct {
	mock *MockRepositoryFactory
}

// NewMockRepositoryFactory creates a new mock instance.
func NewMockRepositoryFactory(ctrl *gomock.Controller) *MockRepositoryFactory {
	mock := &MockRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryFactory) EXPECT() *MockRepositoryFactoryMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockRepositoryFactory) CreateRepository() repository.AggregateRepositoryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository")
	ret0, _ := ret[0].(repository.AggregateRepositoryInterface)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockRepositoryFactoryMockRecorder) CreateRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRepositoryFactory)(nil).CreateRepository))
}
