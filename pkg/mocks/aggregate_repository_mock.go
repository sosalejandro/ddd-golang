// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=../mocks/aggregate_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	event_manager "github.com/sosalejandro/ddd-golang/pkg/event-manager"
	repository "github.com/sosalejandro/ddd-golang/pkg/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockAggregateRepositoryInterface is a mock of AggregateRepositoryInterface interface.
type MockAggregateRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockAggregateRepositoryInterfaceMockRecorder is the mock recorder for MockAggregateRepositoryInterface.
type MockAggregateRepositoryInterfaceMockRecorder struct {
	mock *MockAggregateRepositoryInterface
}

// NewMockAggregateRepositoryInterface creates a new mock instance.
func NewMockAggregateRepositoryInterface(ctrl *gomock.Controller) *MockAggregateRepositoryInterface {
	mock := &MockAggregateRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAggregateRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateRepositoryInterface) EXPECT() *MockAggregateRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAggregateRepositoryInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAggregateRepositoryInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAggregateRepositoryInterface)(nil).Close))
}

// GetAggregateEvents mocks base method.
func (m *MockAggregateRepositoryInterface) GetAggregateEvents(ctx context.Context, id uuid.UUID) ([]event_manager.EventPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateEvents", ctx, id)
	ret0, _ := ret[0].([]event_manager.EventPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateEvents indicates an expected call of GetAggregateEvents.
func (mr *MockAggregateRepositoryInterfaceMockRecorder) GetAggregateEvents(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateEvents", reflect.TypeOf((*MockAggregateRepositoryInterface)(nil).GetAggregateEvents), ctx, id)
}

// LoadSnapshot mocks base method.
func (m *MockAggregateRepositoryInterface) LoadSnapshot(ctx context.Context, aggregateID uuid.UUID) (*repository.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSnapshot", ctx, aggregateID)
	ret0, _ := ret[0].(*repository.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSnapshot indicates an expected call of LoadSnapshot.
func (mr *MockAggregateRepositoryInterfaceMockRecorder) LoadSnapshot(ctx, aggregateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSnapshot", reflect.TypeOf((*MockAggregateRepositoryInterface)(nil).LoadSnapshot), ctx, aggregateID)
}

// SaveEvents mocks base method.
func (m *MockAggregateRepositoryInterface) SaveEvents(ctx context.Context, events []event_manager.EventPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvents indicates an expected call of SaveEvents.
func (mr *MockAggregateRepositoryInterfaceMockRecorder) SaveEvents(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvents", reflect.TypeOf((*MockAggregateRepositoryInterface)(nil).SaveEvents), ctx, events)
}

// SaveSnapshot mocks base method.
func (m *MockAggregateRepositoryInterface) SaveSnapshot(ctx context.Context, snapshot *repository.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSnapshot", ctx, snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSnapshot indicates an expected call of SaveSnapshot.
func (mr *MockAggregateRepositoryInterfaceMockRecorder) SaveSnapshot(ctx, snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSnapshot", reflect.TypeOf((*MockAggregateRepositoryInterface)(nil).SaveSnapshot), ctx, snapshot)
}
